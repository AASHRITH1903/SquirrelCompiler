MIPS :

jal     --> calls the function
jr      --> jump to the specified register
$ra     --> return address
$a0-$a3 --> arguments (4 - not a hard limit)
$v0-$v1 --> return values (2 - not a hard limit)


-------------------- sq -----------------------------
float @sum(int a, float b, int d){
    float c = a+d+b;
    return c;
}

void @main(){
    int a = 1;
    float b = 2.5;
    c = sum(a,b)
}

------------------- tac -----------------------------
sum:
        t0 = a+d
        tf0 = (float)t0
        tf1 = tf0+b
        
        # expr(f) -> expr1(d) + expr2 (f)
        # expr1 -> var1 + var2
        # expr2 -> var3 (f)
        
        # tf0 = (float)a
        # tf1 = (float)d
        # t1 = tf0+b
        c = tf1
        return c

main:
        a = (int)1
        b = (float)2.5
        param a
        param b
        t2 = call sum,2
        c = t2

------------------- mips ----------------------------
        .data
        .text
        .globl	main
main:
        li      $t0,1
        li.s    $f0,2.5
        move    $a0,$t0
        mfc1    $a1,$f0
        jal     sum
	mtc1	$v0,$f12
        li      $v0,2
        syscall
        li      $v0,10
        syscall

sum:    
        # store all the float registers
        # in stack for safety
        # a0 -> a, a1 -> b
        mtc1    $a1,$f1         # a0 -> a, f1 -> b
        mtc1    $a0,$f0
        cvt.s.w $f0,$f0         # f0 -> t0, 
        add.s   $f2,$f0,$f1     # f2 -> t1/c
        mfc1    $v0,$f2
        jr      $ra


//  variable descriptor can be used to know which register is 
//  is currently storing the value of the variable

----------------------------------------------------------------------------

                        A_FUNC
        A_PARAMS                A_NODE
                              /        \
                        A_NODE          A_NODE
                                          |
                                        A_FOR


                         A_IF            A_ELSE
                          |                 |
                        A_RETURN        A_RETURN




if(){
  return
}else{

}

if()
elif
elif
elif
else

--------------------------------------------------------


char a;
int b;
float c;

c > b > a

c = a+b;

t0 = ()


