✓ 1. Semantic analysis for FUNCTION CALLS - no.of args, type of args,

- When a function is defined, check for unique name and signature combination.

✓ 2. error in testcase: string f3 = -"hello";
Probably unary operator in declaration is not working

3. What do we do about all the warnings? - Kranthi (later) - need to find a sly command to disable the warnings

✓ 4. jump statements - shreetesh (check)

✓ 5. Explicit and implicit type casting TAC? - most probably done

✓ 6. Not able to do semantic analysis for for loop until the get_datatype method of the symbol table is implemented correctly - breaks in case of for loop

✓ 7. for array reference of multi-dimensional arrays, we have to
multiply the index with all the previous dimensions - need to
change it (shreetesh).

✓ 8. Aashrith - store functions in symbol table, this means that in our language
we have to declare/define the function before use

9. Semantic analysis for function definitions : check the return type
   and check if the value of the same type is being returned in the
   function body. (check inside if, else, etc.) - Aashrith

10. Look into the possibility of creating a control flow graph for
    semantic checks and optimizations - this is a very important - how to make this -
    detect dead subtree, prune the AST, then call generate code - not for the presentation - keep thinking abotu it

✓ 11. Labels issue - some repeated labels and some are missing - Shreetesh, Kranthi - tomorrow

✓ 12. just add an implicit return in case user missed it, no need for the semantic check - Aashrith

13. Dynamically create the instance variables in the AstNodes

14. Semantic checks for explicit casts that are not allowed - Debeshee

✓ Aashrith - refactor generatecode method - passing parser instead of individual methods

✓ 16. Semantic check for trying to use array variables inappropriately - eg. a[2] = {5,2};
a = 2; // should give an error

17. Can we return AstNodes everywhere? - it will make life peaceful

18. Same function name and variable name - semantic check? ( Eg. int area; void @area())

Kranthi 13. Stitching together parser with preprocessor - run from main method 14. test recursion - and all test cases
✓ 15. output.tac file, move it to output folder
✓ 16. formatting the TAC file - write a post processing method to clean up the TAC

19. @captnTardigrade: Can we remove empty labels without messing up anything in the TAC - while post processing the TAC?

✓ 18. TAC for input() and output()

✓ 19. for "@sum", what is the function name?

20. Should we change the way we represent string variables in TAC?

✓ 21. Type casting in assignment of AND OR NOT

✓ 22. Negative numbers not working in INTVAL in arrays. - Shreetesh

23. comparing enum - Operator.value instead of Operator

24. Add something to the temp variable name so that it wont be the same as normal variables, append scope to it

25. In fibonacci recursive test case, one extra implicit type casting is done --> "t5 = (int) t2"

---

Learnings:
@captnTardigrade:

Cherry-picked test cases:
@Shreetesh

Wednesday, March 23rd, 2022

Friday Presentation:

1. slide
2. live demo - a few test cases

Phase 2:
1 meeting next week - chalk out concrete plan for phase 2

1. Register allocation - register descriptors and variable descriptors
   0 to 31 registers, status attached to each one, if its free, or taken
   availability, mark a register an unavilable, free the register
   if a register is taken, we have to spill the register (save it in memory), then go ahead and use the register
   decide on a method that is optimized, but not too hard to do
2. Code Optimization
   if its x^2, change it to x\*x,
   if it is x/2 we can change it to right shift

   load and stores without modifications (maybe a dirty check)

   detecting dead code and eliminating it

   if a condition always evaluates to false - some corresponding section mught be unreachable - we should get rid of it

3. Code generation
4. Type conversions
5.

Test cases not working:

(none)

TODO test case:

1. SemanticTest3.sq

Test cases not eligible:

1. GCDRecursion.sq
2. MatrixSum.sq
3. Palindrome.sq
4. preprocess_test1.sq
