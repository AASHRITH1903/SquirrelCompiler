program -> methods
methods -> methods method | method

method -> DATATYPE FUNCNAME ( params ) { statements }
statements -> statement; statements | e
params -> DATATYPE VARNAME, params | DATATYPE VARNAME

statement -> declaration_statement | assignment_statement | io_statement | selection_statement | iteration_statement | jump_statement

declaration_statement -> simple_init | array_init
simple_init -> DATATYPE VARNAME | DATATYPE VARNAME = expr

array_init -> DATATYPE VARNAME [INTVAL] = { array_list } | DATATYPE VARNAME [INTVAL? ] [INTVAL] = { array_list } 
array_list = constant, array_list | constant

constant -> INTVAL | FLOATVAL | CHARVAL | STRINGVAL | BOOLVAL

arr_variable -> VARNAME [INTVAL] |VARNAME [INTVAL][INTVAL] 
assignment_statement -> left_value = expr
left_value -> VARNAME | array_variable

io_statement -> input_statement | output_statement
input_statement -> INPUT ( left_value )
output_statement -> OUTPUT ( left_value ) | OUTPUT ( constant )

selection_statement -> if_statement | switch_statement
if_statement -> IF ( condition ) { statements } | IF ( condition ) { statements} ELSE { statements} | IF ( condition ) { statements} elif | IF ( condition ) { statements} elif ELSE { statements}
elif -> ELIF ( condition ) { statements } elif | ELIF ( condition ) { statements }

switch_statement -> SWITCH ( left_value ) { case_statements }
case_statements -> case_statement case_statements | case_statement | default_statement
case_statement -> CASE ( constant ) COLON statements 
default_statement -> DEFAULT COLON statements

interation_statement -> while_statement | for_statement
while_statement -> WHILE ( condition ) { statements }
for_statement -> FOR ( for_init ; condition ; assignment_statement ) { statements }
for_init -> DATATYPE VARNAME = expr | VARNAME = expr

jump_statement -> BREAK | return_statement 
return_statement -> RETURN expr | RETURN

TODO expr
expr -> VARNAME | array_variable | 


