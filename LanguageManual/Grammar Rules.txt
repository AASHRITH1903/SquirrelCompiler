✓ program -> methods
✓ methods -> methods method | method

✓ method -> DATATYPE FUNCNAME ( params ) { statements }
✓ statements -> statement statements | e //not sure if this epsilon will cause issues - this leads to empty blocks
params -> DATATYPE VARNAME, params | e

✓ params -> params_rec | e
✓ params_rec -> DATATYPE VARNAME COMMA params_rec | DATATYPE VARNAME

statement -> declaration_statement SEMICOL | assignment_statement SEMICOL | io_statement SEMICOL | jump_statement SEMICOL | selection_statement | iteration_statement

declaration_statement -> simple_init | array_init
simple_init -> DATATYPE VARNAME | DATATYPE VARNAME = expr

# TODO : empty list not permitted 
# TODO : write rules for global variables

array_init -> DATATYPE VARNAME [INTVAL] = { array_list } | DATATYPE VARNAME [INTVAL? ] [INTVAL] = { array_list } 

array_list -> array_list_rec | e
array_list_rec -> constant, array_list_rec | constant

constant -> INTVAL | FLOATVAL | CHARVAL | STRINGVAL | BOOLVAL

array_variable -> VARNAME [INTVAL] | VARNAME [INTVAL][INTVAL] | VARNAME [VARNAME] | VARNAME [VARNAME][VARNAME] | VARNAME [INTVAL][VARNAME] | VARNAME [VARNAME][INTVAL]
✓ assignment_statement -> left_value = expr
left_value -> VARNAME | array_variable


io_statement -> input_statement | output_statement
input_statement -> INPUT ( left_value )
output_statement -> OUTPUT ( left_value ) | OUTPUT ( constant )

selection_statement -> if_statement | switch_statement
✓ if_statement -> IF ( expr ) { statements } | IF ( expr ) { statements} ELSE { statements} | IF ( expr ) { statements} elif
✓ elif -> ELIF ( expr ) { statements } elif | ELIF ( expr ) { statements } | ELIF ( expr ) { statements } ELSE { statements }

switch_statement -> SWITCH ( left_value ) { case_statements }
case_statements -> case_statement case_statements | case_statement | default_statement
case_statement -> CASE ( constant ) COLON statements 
default_statement -> DEFAULT COLON statements

interation_statement -> while_statement | for_statement
✓ while_statement -> WHILE ( expr ) { statements }
for_statement -> FOR ( for_init ; expr ; assignment_statement ) { statements }
for_init -> assignment_statement | declaration_statement

jump_statement -> BREAK | return_statement | CONTINUE
return_statement -> RETURN expr | RETURN

✓ expr -> expr PLUS expr | expr MINUS expr | expr MULT expr | expr DIVIDE expr | expr MOD expr | MINUS expr %prec UMINUS
        | (expr) %prec PAREN | function_call | expr RELOP1 expr | expr RELOP2 expr | expr AND expr | expr OR expr | NOT expr | VARNAME
        | array_variable | constant | (DATATYPE) expr %prec TYPECASTING


function_call -> VARNAME ( argument_list )
argument_list -> expr, argument_list | e

#  -----------------------------

Problems :
1. case statements may need {} for multiple statements
2. Implement dimensions in ST
3. ref TACtest4
4. During the Semantic analysis check the size of the array
5. During the Semantic analysis check VARNAME length in declaration_statement
6. Elegant error messages eg : col, row numbers of the error
