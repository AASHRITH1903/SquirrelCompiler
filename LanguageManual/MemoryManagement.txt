register_descriptor = {
    "$r1" = ["a", "b"]
}

address_descriptor = {
    "name" : {
        "offset" : "0x12345678"     // get from the stack pointer
        "registers": []
    },

    "age" : {

    },

    "t1" : {
        "offset" : "0x12345678"
        "registers" : []
    }
}


Stack allocation :-

my_fun:
    t1 = t2 
    // check in the address_descriptor if t1 is there
    // if not :
    //      address_descriptor.add(key="t1", {
    //         memory  
    //      })


// t1 is in $r1
sub $sp, $sp, 4  // $sp -> 
sw $sp, $r1

lw $r1, <memory_address>

function_calls (tac):


sum:
    t4 = t5+t6
    return t4

main:
    t1 = t2
    param t1
    param t2
    t3 = call sum,2
    output(t3)

spill for the first time :-
    
    // spill $r1
    // sw <stack_address>, $r1
    jal sum



TAC

sum:
    t1 = t2+t3
    t4 = t1 + t5
    return t4 

main:
    t9 = t8+t7
    t11 = t10 + t6
    return t11

--------------------------------------------
MIPS :

sum:
    move $t0, $sp
    
    sub $sp,$sp,8
    sw  


-------------------------------------------
Cases for updates_descriptors

Case 1: Register Spilling

    Update the register_descriptor with the new variable that it stores (do after load)

    Subcase 1: Already Memory is Allocated for the memory
        -> Do nothing
    Subcase 2: Memory not allocated for the variable
        -> Update address_descriptor with offset and register with current register
    
Case 2: No Register spill (When a register is available)
    Just update the register_descriptor and address_descriptor 

    add var to register_descriptor
    add reg to address_descriptor.registers

Case 3: Load a variable into a register (after register spill, after a funciton is called)
    Update address_descriptor.register with new register
    Update register_descriptor with the new variable

